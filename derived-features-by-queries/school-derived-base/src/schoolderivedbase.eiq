import "http:///school-derived.ecore"

@QueryBasedFeature(feature = "numberOfTeachers", kind = "counter")
pattern teachers(School : School, Teacher : Teacher) = {
   School.teachers(School,Teacher);
}

private pattern coursesOfTeacher(Teacher : Teacher, Course :  Course) = {
   Teacher.courses(Teacher,Course);
}

@QueryBasedFeature
pattern teachersWithMostCourses(School : School, Teacher : Teacher) = {
   find teachers(School,Teacher);
   neg find moreCourses(Teacher);
}

private pattern moreCourses(Teacher : Teacher) = {
	N == count find coursesOfTeacher(Teacher,_Course);
    M == count find coursesOfTeacher(Teacher2,_Course2);
    School.teachers(School, Teacher2);
    School.teachers(School, Teacher);
    Teacher != Teacher2;
    check(N  < M);
}

@QueryBasedFeature
pattern lastYear(School : School, Year : Year) = {
   School.years(School,Year);
   neg find laterYear(Year);
}

private pattern laterYear(Year : Year) = {
	Year.startingDate(Year, Date);
	Year.startingDate(Year2, Date2);
	School.years(School, Year);
	School.years(School, Year2);
	Year != Year2;
	check(Date < Date2);
}

@QueryBasedFeature
pattern homeroomCourses(SchC : SchoolClass, C : Course) = {
  SchoolClass.courses(SchC,C);
  Course.teacher(C,T);
  SchoolClass.homeroomTeacher(SchC,T);
}

@QueryBasedFeature(feature = "weightOfRegularCourses", source = Y, kind = "sum")
pattern courseWeights(Sch: School, W, Y : Year) = {
  School.years(Sch,Y);
  Year.schoolClasses.courses(Y,C);
  neg find specialCourse(C);
  Course.weight(C,W);
}

private pattern specialCourse(SC : SpecialisationCourse) = {
  SpecialisationCourse(SC);
}
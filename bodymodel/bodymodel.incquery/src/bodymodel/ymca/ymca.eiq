package bodymodel.ymca

import "http://org/jnect/bodymodel"

@QueryExplorer(display = true)
pattern rightHandAboveHead(RH:RightHand,H:Head) {
	RightHand.y(RH,RHy);
	Head.y(H,Hy);
	check(
		bodymodel::MovingAverageCalculator::getCalculator("HY").addValue(Hy).movingAvg < 
		 bodymodel::MovingAverageCalculator::getCalculator("RHY").addValue(RHy).movingAvg
	);
}

@QueryExplorer(display = true)
pattern leftHandAboveHead(LH:LeftHand,H:Head) {
	LeftHand.y(LH,LHy);
	Head.y(H,Hy);
	check(
		bodymodel::MovingAverageCalculator::getCalculator("HY").addValue(Hy).movingAvg < 
		 bodymodel::MovingAverageCalculator::getCalculator("LHY").addValue(LHy).movingAvg
	);
}

/*
 * See https://github.com/ujhelyiz/EMF-IncQuery/issues/312
 */
@QueryExplorer(display = true)
pattern handsAreClose_buggy(LH:LeftHand,RH:RightHand) {
	LeftHand.x(LH,LHX);
	LeftHand.y(LH,LHY);
	LeftHand.z(LH,LHZ);
	RightHand.x(RH,RHX);
	RightHand.y(RH,RHY);
	RightHand.z(RH,RHZ);
	check({
		var float lhx = LHX
		var float lhy = LHY
		var float lhz = LHZ
		var float rhx = RHX
		var float rhy = RHY
		var float rhz = RHZ
		// I suspect the issue stems from the fact that EMF domain objects are wired into Java code
		bodymodel::ymca::VectorMaths::lengthOf(bodymodel::ymca::VectorMaths::createVector(LH,RH)) < bodymodel::ymca::YMCAConstants::closeDistance
		});
}

@QueryExplorer(display = true)
pattern handsAreClose(LH:LeftHand,RH:RightHand) {
	LeftHand.x(LH,LHX);
	LeftHand.y(LH,LHY);
	LeftHand.z(LH,LHZ);
	RightHand.x(RH,RHX);
	RightHand.y(RH,RHY);
	RightHand.z(RH,RHZ);
	check( bodymodel::ymca::VectorMaths::lengthOf(
		bodymodel::ymca::VectorMaths::createVector(
			bodymodel::MovingAverageCalculator::getCalculator("LHX").addValue(LHX).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("LHY").addValue(LHY).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("LHZ").addValue(LHZ).movingAvg, 
			bodymodel::MovingAverageCalculator::getCalculator("RHX").addValue(RHX).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("RHY").addValue(RHY).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("RHZ").addValue(RHZ).movingAvg
		)) < bodymodel::ymca::YMCAConstants::closeDistance );
}

@QueryExplorer(display = true)
pattern handsAreApart(LH:LeftHand,RH:RightHand) {
	LeftHand.x(LH,LHX);
	LeftHand.y(LH,LHY);
	LeftHand.z(LH,LHZ);
	RightHand.x(RH,RHX);
	RightHand.y(RH,RHY);
	RightHand.z(RH,RHZ);
	check( bodymodel::ymca::VectorMaths::lengthOf(
		bodymodel::ymca::VectorMaths::createVector(
			bodymodel::MovingAverageCalculator::getCalculator("LHX").addValue(LHX).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("LHY").addValue(LHY).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("LHZ").addValue(LHZ).movingAvg, 
			bodymodel::MovingAverageCalculator::getCalculator("RHX").addValue(RHX).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("RHY").addValue(RHY).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("RHZ").addValue(RHZ).movingAvg
		)) > bodymodel::ymca::YMCAConstants::apartDistance );
}


@QueryExplorer(display = true)
pattern feetAreClose(LF:LeftFoot,RF:RightFoot) {
	LeftFoot.x(LF,LFX);
	LeftFoot.y(LF,LFY);
	LeftFoot.z(LF,LFZ);
	RightFoot.x(RF,RFX);
	RightFoot.y(RF,RFY);
	RightFoot.z(RF,RFZ);
	check( bodymodel::ymca::VectorMaths::lengthOf(
		bodymodel::ymca::VectorMaths::createVector(
			bodymodel::MovingAverageCalculator::getCalculator("LFX").addValue(LFX).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("LFY").addValue(LFY).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("LFZ").addValue(LFZ).movingAvg, 
			bodymodel::MovingAverageCalculator::getCalculator("RFX").addValue(RFX).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("RFY").addValue(RFY).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("RFZ").addValue(RFZ).movingAvg
		)) < bodymodel::ymca::YMCAConstants::closeDistance );
}

@QueryExplorer(display = true)
pattern feetAreApart(LF:LeftFoot,RF:RightFoot) {
	LeftFoot.x(LF,LFX);
	LeftFoot.y(LF,LFY);
	LeftFoot.z(LF,LFZ);
	RightFoot.x(RF,RFX);
	RightFoot.y(RF,RFY);
	RightFoot.z(RF,RFZ);
	check( bodymodel::ymca::VectorMaths::lengthOf(
		bodymodel::ymca::VectorMaths::createVector(
			bodymodel::MovingAverageCalculator::getCalculator("LFX").addValue(LFX).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("LFY").addValue(LFY).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("LFZ").addValue(LFZ).movingAvg, 
			bodymodel::MovingAverageCalculator::getCalculator("RFX").addValue(RFX).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("RFY").addValue(RFY).movingAvg,
			bodymodel::MovingAverageCalculator::getCalculator("RFZ").addValue(RFZ).movingAvg
		)) > bodymodel::ymca::YMCAConstants::apartDistance );
}


/**
 * Right arm is stretched straight.
 */
@QueryExplorer(display = true)
pattern stretchedRightArm(RH:RightHand, // hand 
					 RE:RightElbow, // elbow
					 RS:RightShoulder // shoulder
) {
	// indicate coordinates to be used for check calculation
	PositionedElement.x(RH,RHX);
	PositionedElement.y(RH,RHY);
	PositionedElement.z(RH,RHZ);
	PositionedElement.x(RE,REX);
	PositionedElement.y(RE,REY);
	PositionedElement.z(RE,REZ);
	PositionedElement.x(RS,RSX);
	PositionedElement.y(RS,RSY);
	PositionedElement.z(RS,RSZ);
	// check that the angle between the lower arm (H-E)
	// and upper arm (S-E) is around PI (180')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("RHX").addValue(RHX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RHY").addValue(RHY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RHZ").addValue(RHZ).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REX").addValue(REX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REY").addValue(REY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REZ").addValue(REZ).movingAvg
			),
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("RSX").addValue(RSX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RSY").addValue(RSY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RSZ").addValue(RSZ).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REX").addValue(REX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REY").addValue(REY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REZ").addValue(REZ).movingAvg
			)
		)
		// System::out.println(angleBetween)
		(Math::PI - angleBetween) < bodymodel::ymca::YMCAConstants::angleTolerance
	});
}

/**
 * Right arm is bent 90'.
 */
@QueryExplorer(display = true)
pattern bentRightArm(RH:RightHand, // hand 
					 RE:RightElbow, // elbow
					 RS:RightShoulder // shoulder
) {
	// indicate coordinates to be used for check calculation
	PositionedElement.x(RH,RHX);
	PositionedElement.y(RH,RHY);
	PositionedElement.z(RH,RHZ);
	PositionedElement.x(RE,REX);
	PositionedElement.y(RE,REY);
	PositionedElement.z(RE,REZ);
	PositionedElement.x(RS,RSX);
	PositionedElement.y(RS,RSY);
	PositionedElement.z(RS,RSZ);
	// check that the angle between the lower arm (H-E)
	// and upper arm (S-E) is around PI/2 (90')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("RHX").addValue(RHX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RHY").addValue(RHY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RHZ").addValue(RHZ).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REX").addValue(REX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REY").addValue(REY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REZ").addValue(REZ).movingAvg
			),
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("RSX").addValue(RSX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RSY").addValue(RSY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RSZ").addValue(RSZ).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REX").addValue(REX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REY").addValue(REY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REZ").addValue(REZ).movingAvg
			)
		)
		// System::out.println(angleBetween)
		Math::abs(Math::PI/2 - angleBetween) < bodymodel::ymca::YMCAConstants::angleTolerance
	});
}

/**
 * Left arm is stretched straight.
 */
@QueryExplorer(display = true)
pattern stretchedLeftArm(LH:LeftHand, // hand 
					 LE:LeftElbow, // elbow
					 LS:LeftShoulder // shoulder
) {
	// indicate coordinates to be used for check calculation
	PositionedElement.x(LH,LHX);
	PositionedElement.y(LH,LHY);
	PositionedElement.z(LH,LHZ);
	PositionedElement.x(LE,LEX);
	PositionedElement.y(LE,LEY);
	PositionedElement.z(LE,LEZ);
	PositionedElement.x(LS,LSX);
	PositionedElement.y(LS,LSY);
	PositionedElement.z(LS,LSZ);
	// check that the angle between the lower arm (H-E)
	// and upper arm (S-E) is around PI (180')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("LHX").addValue(LHX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LHY").addValue(LHY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LHZ").addValue(LHZ).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEX").addValue(LEX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEY").addValue(LEY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEZ").addValue(LEZ).movingAvg
			),
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("LSX").addValue(LSX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LSY").addValue(LSY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LSZ").addValue(LSZ).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEX").addValue(LEX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEY").addValue(LEY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEZ").addValue(LEZ).movingAvg
			)
		)
		// System::out.println(angleBetween)
		(Math::PI - angleBetween) < bodymodel::ymca::YMCAConstants::angleTolerance
	});
}

/**
 * Left arm is bent 90'.
 */
@QueryExplorer(display = true)
pattern bentLeftArm(LH:LeftHand, // hand 
					LE:LeftElbow, // elbow
					LS:LeftShoulder // shoulder
) {
	// indicate coordinates to be used for check calculation
	PositionedElement.x(LH,LHX);
	PositionedElement.y(LH,LHY);
	PositionedElement.z(LH,LHZ);
	PositionedElement.x(LE,LEX);
	PositionedElement.y(LE,LEY);
	PositionedElement.z(LE,LEZ);
	PositionedElement.x(LS,LSX);
	PositionedElement.y(LS,LSY);
	PositionedElement.z(LS,LSZ);
	// check that the angle between the lower arm (H-E)
	// and upper arm (S-E) is around PI/2 (90')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("LHX").addValue(LHX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LHY").addValue(LHY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LHZ").addValue(LHZ).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEX").addValue(LEX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEY").addValue(LEY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEZ").addValue(LEZ).movingAvg
			),
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("LSX").addValue(LSX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LSY").addValue(LSY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LSZ").addValue(LSZ).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEX").addValue(LEX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEY").addValue(LEY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEZ").addValue(LEZ).movingAvg
			)
		)
		// System::out.println(angleBetween)
		Math::abs(Math::PI/2 - angleBetween) < bodymodel::ymca::YMCAConstants::angleTolerance
	});
}


@QueryExplorer(display = true)
pattern upperArmsInY(LE:LeftElbow,
					 LS:LeftShoulder,
					 RE:RightElbow,
					 RS:RightShoulder
) {
	// indicate coordinates to be used for check calculation
	PositionedElement.x(LE,LEX);
	PositionedElement.y(LE,LEY);
	PositionedElement.z(LE,LEZ);
	PositionedElement.x(LS,LSX);
	PositionedElement.y(LS,LSY);
	PositionedElement.z(LS,LSZ);
	PositionedElement.x(RE,REX);
	PositionedElement.y(RE,REY);
	PositionedElement.z(RE,REZ);
	PositionedElement.x(RS,RSX);
	PositionedElement.y(RS,RSY);
	PositionedElement.z(RS,RSZ);
	// check that the angle between the left upper arm (LE-LS)
	// and right upper arm (RE-RS) is around PI/3 (60')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("LEX").addValue(LEX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEY").addValue(LEY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LEZ").addValue(LEZ).movingAvg,
				bodymodel::MovingAverageCalculator::getCalculator("LSX").addValue(LSX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LSY").addValue(LSY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("LSZ").addValue(LSZ).movingAvg
			),
			bodymodel::ymca::VectorMaths::createVector(
				bodymodel::MovingAverageCalculator::getCalculator("REX").addValue(REX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REY").addValue(REY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("REZ").addValue(REZ).movingAvg,
				bodymodel::MovingAverageCalculator::getCalculator("RSX").addValue(RSX).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RSY").addValue(RSY).movingAvg, 
				bodymodel::MovingAverageCalculator::getCalculator("RSZ").addValue(RSZ).movingAvg
			)
		)
		// System::out.println(angleBetween)
		Math::abs(Math::PI/3 - angleBetween) < bodymodel::ymca::YMCAConstants::angleTolerance
	});
}

/**
 * The body is in the "Y" position.
 */
pattern Y(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder, 
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder,
		  H:Head
) {
	// both arms are stretched
	find stretchedRightArm(RH,RE,RS);
	find stretchedLeftArm(LH,LE,LS);
	// both hands are above the head
	find rightHandAboveHead(RH,H);
	find leftHandAboveHead(LH,H);
	// angle between upper arms is around PI/3
	find upperArmsInY(LE,LS,RE,RS);
}

/**
 * The body is in the "I" position.
 */
pattern I(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  H:Head 
) {
	// both arms are stretched
	find stretchedRightArm(RH,RE,RS);
	find stretchedLeftArm(LH,LE,LS);
	// right hand above the head, left below
	find rightHandAboveHead(RH,H);
	neg find leftHandAboveHead(LH,H);
	// angle between upper arms is not around PI/3
	neg find upperArmsInY(LE,LS,RE,RS);
}

/**
 * The body is in the "A" position.
 */
pattern A(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder,
		  H:Head
) {
	// both arms are bent
	find bentRightArm(RH,RE,RS);
	find bentLeftArm(LH,LE,LS);
	// both hands above the head and close
	find rightHandAboveHead(RH,H);
	find leftHandAboveHead(LH,H);
	// find handsAreClose(LH,RH);
	// angle between upper arms is around PI/3
	find upperArmsInY(LE,LS,RE,RS);
}

/**
 * The body is in the "M" position.
 */
pattern M(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder,
		  H:Head
) {
	Head(H);
	// both arms are bent
	find bentRightArm(RH,RE,RS);
	find bentLeftArm(LH,LE,LS);
	// both hands below the head
	neg find rightHandAboveHead(RH,H);
	neg find leftHandAboveHead(LH,H);
	// elbows are around shoulder height
	LeftElbow.y(LE,LEY);
	LeftShoulder.y(LS,LSY);
	check(Math::abs(bodymodel::MovingAverageCalculator::getCalculator("LEY").addValue(LEY).movingAvg
		- bodymodel::MovingAverageCalculator::getCalculator("LSY").addValue(LSY).movingAvg) < bodymodel::ymca::YMCAConstants::veryCloseDistance);
	RightElbow.y(RE,REY);
	RightShoulder.y(RS,RSY);
	check(Math::abs(bodymodel::MovingAverageCalculator::getCalculator("REY").addValue(REY).movingAvg
		- bodymodel::MovingAverageCalculator::getCalculator("RSY").addValue(RSY).movingAvg) < bodymodel::ymca::YMCAConstants::veryCloseDistance);	
	// hands are apart
	find handsAreApart(LH,RH);
}

/**
 * The body is in the "Q" position.
 */
pattern Q(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder,
		  LF:LeftFoot,
		  RF:RightFoot,
		  H:Head
) {
	// both arms are bent
	find bentRightArm(RH,RE,RS);
	find bentLeftArm(LH,LE,LS);
	// both hands below the head
	neg find rightHandAboveHead(RH,H);
	neg find leftHandAboveHead(LH,H);
	// hands are close
	find handsAreClose(LH,RH);
	// right leg is straight 
	// TODO
	// right foot is far away from left foot
	find feetAreApart(LF,RF);
}

/**
 * The body is in the "C" position.
 */
pattern C(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder,
		  H:Head
) {
	// both arms are bent
	find bentRightArm(RH,RE,RS);
	// find bentLeftArm(LH,LE,LS);
	// right hand below, left hand above the head
	neg find rightHandAboveHead(RH,H);
	neg find leftHandAboveHead(LH,H);
	// hands are not close
	// neg find handsAreClose(LH,RH);
	// left hand is to the right of the head
	Head.x(H,HX);
	LeftHand.x(LH,LHX);
	check(bodymodel::MovingAverageCalculator::getCalculator("LHX").addValue(LHX).movingAvg > 
		bodymodel::MovingAverageCalculator::getCalculator("HX").addValue(HX).movingAvg);
	// left elbow is to the right of the head
	LeftElbow.x(LE,LEX);
	check(bodymodel::MovingAverageCalculator::getCalculator("LEX").addValue(LEX).movingAvg > 
		bodymodel::MovingAverageCalculator::getCalculator("HX").addValue(HX).movingAvg);
		
}

// "control powerpoint with awt.Robot" demo

/*
 * Forward start position.
 */
pattern FS(RH: RightHand,
					  RE: RightElbow,
					  RS: RightShoulder,
					   H: Head) 
{
	find stretchedRightArm(RH,RE,RS);
	neg find rightHandAboveHead(RH,H);
}

/*
 * Forward end position.
 */
pattern FE(RH: RightHand,
					RE: RightElbow,
					RS: RightShoulder,
					 H: Head) 
{
	find bentRightArm(RH,RE,RS);
	neg find rightHandAboveHead(RH,H);
}

/*
 * Backward start position.
 */
pattern BS(LH: LeftHand,
					   LE: LeftElbow,
					   LS: LeftShoulder,
					   H: Head) 
{
	find stretchedLeftArm(LH,LE,LS);
	neg find leftHandAboveHead(LH,H);
}

/*
 * Backward end position.
 */
pattern BE(LH: LeftHand,
					 LE: LeftElbow,
					 LS: LeftShoulder,
					  H: Head) 
{
	find bentLeftArm(LH,LE,LS);
	neg find leftHandAboveHead(LH,H);
}


// control model train through Sheldon demo

pattern SS(RH: RightHand,
		   RE: RightElbow,
		   RS: RightShoulder,
		   H : Head)
{
	find stretchedRightArm(RH,RE,RS);
	neg find rightHandAboveHead(RH,H);		   	
}
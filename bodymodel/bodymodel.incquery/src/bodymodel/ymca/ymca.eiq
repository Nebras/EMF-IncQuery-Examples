package bodymodel.ymca

import "http://org/jnect/bodymodel"

@QueryExplorer(display = true)
pattern rightHandAboveHead(RH:RightHand,H:Head) {
//	find partsOfABody(B,RH);
//	find partsOfABody(B,H); // just to ensure that they are part of the same body
	RightHand.y(RH,RHy);
	Head.y(H,Hy);
	check( Hy < RHy );
}

@QueryExplorer(display = true)
pattern leftHandAboveHead(LH:LeftHand,H:Head) {
//	find partsOfABody(B,LH);
//	find partsOfABody(B,H); // just to ensure that they are part of the same body
	LeftHand.y(LH,LHy);
	Head.y(H,Hy);
	check( Hy < LHy );
}

@QueryExplorer(display = true)
pattern handsAreClose(LH:LeftHand,RH:RightHand) {
//	find partsOfABody(B,LH);
//	find partsOfABody(B,RH); // just to ensure that they are part of the same body
	LeftHand.x(LH,LHX);
	LeftHand.y(LH,LHY);
	LeftHand.z(LH,LHZ);
	RightHand.x(RH,RHX);
	RightHand.y(RH,RHY);
	RightHand.z(RH,RHZ);
	check( bodymodel::ymca::VectorMaths::lengthOf(
		bodymodel::ymca::VectorMaths::createVector(LHX,LHY,LHZ, RHX,RHY,RHZ)) < 0.1 );
}

@QueryExplorer(display = true)
pattern handsAreApart(LH:LeftHand,RH:RightHand) {
//	find partsOfABody(B,LH);
//	find partsOfABody(B,RH); // just to ensure that they are part of the same body
	LeftHand.x(LH,LHX);
	LeftHand.y(LH,LHY);
	LeftHand.z(LH,LHZ);
	RightHand.x(RH,RHX);
	RightHand.y(RH,RHY);
	RightHand.z(RH,RHZ);
	check( bodymodel::ymca::VectorMaths::lengthOf(
		bodymodel::ymca::VectorMaths::createVector(LHX,LHY,LHZ, RHX,RHY,RHZ)) > 0.5 );
}


@QueryExplorer(display = true)
pattern feetAreClose(LF:LeftFoot,RF:RightFoot) {
//	find partsOfABody(B,LF);
//	find partsOfABody(B,RF); // just to ensure that they are part of the same body
	LeftFoot.x(LF,LFX);
	LeftFoot.y(LF,LFY);
	LeftFoot.z(LF,LFZ);
	RightFoot.x(RF,RFX);
	RightFoot.y(RF,RFY);
	RightFoot.z(RF,RFZ);
	check( bodymodel::ymca::VectorMaths::lengthOf(
		bodymodel::ymca::VectorMaths::createVector(LFX,LFY,LFZ, RFX,RFY,RFZ)) < 0.3 );
}


/**
 * Right arm is stretched straight.
 */
@QueryExplorer(display = true)
pattern stretchedRightArm(H:RightHand, // hand 
					 E:RightElbow, // elbow
					 S:RightShoulder // shoulder
) {
	// ensure they are all connected to the same body
//	find partsOfABody(B,H);
//	find partsOfABody(B,E);
//	find partsOfABody(B,S);
	// indicate coordinates to be used for check calculation
	PositionedElement.x(H,HX);
	PositionedElement.y(H,HY);
	PositionedElement.z(H,HZ);
	PositionedElement.x(E,EX);
	PositionedElement.y(E,EY);
	PositionedElement.z(E,EZ);
	PositionedElement.x(S,SX);
	PositionedElement.y(S,SY);
	PositionedElement.z(S,SZ);
	// check that the angle between the lower arm (H-E)
	// and upper arm (E-S) is around PI (180')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(HX, HY, HZ, EX, EY, EZ),
			bodymodel::ymca::VectorMaths::createVector(SX, SY, SZ, EX, EY, EZ)
		)
		// System::out.println(angleBetween)
		(Math::PI - angleBetween) < 0.3
	});
}

/**
 * Right arm is bent 90'.
 */
@QueryExplorer(display = true)
pattern bentRightArm(H:RightHand, // hand 
					 E:RightElbow, // elbow
					 S:RightShoulder // shoulder
) {
	// ensure they are all connected to the same body
//	find partsOfABody(B,H);
//	find partsOfABody(B,E);
//	find partsOfABody(B,S);
	// indicate coordinates to be used for check calculation
	PositionedElement.x(H,HX);
	PositionedElement.y(H,HY);
	PositionedElement.z(H,HZ);
	PositionedElement.x(E,EX);
	PositionedElement.y(E,EY);
	PositionedElement.z(E,EZ);
	PositionedElement.x(S,SX);
	PositionedElement.y(S,SY);
	PositionedElement.z(S,SZ);
	// check that the angle between the lower arm (H-E)
	// and upper arm (E-S) is around PI/2 (90')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(HX, HY, HZ, EX, EY, EZ),
			bodymodel::ymca::VectorMaths::createVector(SX, SY, SZ, EX, EY, EZ)
		)
		// System::out.println(angleBetween)
		(Math::PI/2 - angleBetween) < 0.5
	});
}

/**
 * Left arm is stretched straight.
 */
@QueryExplorer(display = true)
pattern stretchedLeftArm(H:LeftHand, // hand 
					 E:LeftElbow, // elbow
					 S:LeftShoulder // shoulder
) {
	// ensure they are all connected to the same body
//	find partsOfABody(B,H);
//	find partsOfABody(B,E);
//	find partsOfABody(B,S);
	// indicate coordinates to be used for check calculation
	PositionedElement.x(H,HX);
	PositionedElement.y(H,HY);
	PositionedElement.z(H,HZ);
	PositionedElement.x(E,EX);
	PositionedElement.y(E,EY);
	PositionedElement.z(E,EZ);
	PositionedElement.x(S,SX);
	PositionedElement.y(S,SY);
	PositionedElement.z(S,SZ);
	// check that the angle between the lower arm (H-E)
	// and upper arm (E-S) is around PI (180')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(HX, HY, HZ, EX, EY, EZ),
			bodymodel::ymca::VectorMaths::createVector(SX, SY, SZ, EX, EY, EZ)
		)
		// System::out.println(angleBetween)
		(Math::PI - angleBetween) < 0.3
	});
}

/**
 * Left arm is bent 90'.
 */
@QueryExplorer(display = true)
pattern bentLeftArm(H:LeftHand, // hand 
					 E:LeftElbow, // elbow
					 S:LeftShoulder // shoulder
) {
	// ensure they are all connected to the same body
//	find partsOfABody(B,H);
//	find partsOfABody(B,E);
//	find partsOfABody(B,S);
	// indicate coordinates to be used for check calculation
	PositionedElement.x(H,HX);
	PositionedElement.y(H,HY);
	PositionedElement.z(H,HZ);
	PositionedElement.x(E,EX);
	PositionedElement.y(E,EY);
	PositionedElement.z(E,EZ);
	PositionedElement.x(S,SX);
	PositionedElement.y(S,SY);
	PositionedElement.z(S,SZ);
	// check that the angle between the lower arm (H-E)
	// and upper arm (E-S) is around PI/2 (90')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(HX, HY, HZ, EX, EY, EZ),
			bodymodel::ymca::VectorMaths::createVector(SX, SY, SZ, EX, EY, EZ)
		)
		// System::out.println(angleBetween)
		(Math::PI/2 - angleBetween) < 0.5
	});
}


@QueryExplorer(display = true)
pattern upperArmsInY(LE:LeftElbow,
					 LS:LeftShoulder,
					 RE:RightElbow,
					 RS:RightShoulder
) {
	// ensure they are all connected to the same body
//	find partsOfABody(B,LE);
//	find partsOfABody(B,LS);
//	find partsOfABody(B,RE);
//	find partsOfABody(B,RS);
	// indicate coordinates to be used for check calculation
	PositionedElement.x(LE,LEX);
	PositionedElement.y(LE,LEY);
	PositionedElement.z(LE,LEZ);
	PositionedElement.x(LS,LSX);
	PositionedElement.y(LS,LSY);
	PositionedElement.z(LS,LSZ);
	PositionedElement.x(RE,REX);
	PositionedElement.y(RE,REY);
	PositionedElement.z(RE,REZ);
	PositionedElement.x(RS,RSX);
	PositionedElement.y(RS,RSY);
	PositionedElement.z(RS,RSZ);
	// check that the angle between the left upper arm (LE-LS)
	// and right upper arm (RE-RS) is around PI/3 (60')
	check({
		// we need to "wire" attribute values into the check expression
		var float angleBetween = bodymodel::ymca::VectorMaths::angleBetween(
			bodymodel::ymca::VectorMaths::createVector(LEX, LEY, LEZ, LSX, LSY, LSZ),
			bodymodel::ymca::VectorMaths::createVector(REX, REY, REZ, RSX, RSY, RSZ)
		)
		// System::out.println(angleBetween)
		Math::abs(Math::PI/3 - angleBetween) < 0.2
	});
}

/**
 * The body is in the "Y" position.
 */
pattern Y(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder, 
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder
) {
	// both arms are stretched
	find stretchedRightArm(RH,RE,RS);
	find stretchedLeftArm(LH,LE,LS);
	// both hands are above the head
	find rightHandAboveHead(RH,H);
	find leftHandAboveHead(LH,H);
	// angle between upper arms is around PI/3
	find upperArmsInY(LE,LS,RE,RS);
}

/**
 * The body is in the "I" position.
 */
pattern I(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder 
) {
	// both arms are stretched
	find stretchedRightArm(RH,RE,RS);
	find stretchedLeftArm(LH,LE,LS);
	// right hand above the head, left below
	find rightHandAboveHead(RH,H);
	neg find leftHandAboveHead(LH,H);
	// angle between upper arms is not around PI/3
	neg find upperArmsInY(LE,LS,RE,RS);
}

/**
 * The body is in the "A" position.
 */
pattern A(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder
) {
	// both arms are not stretched
	neg find stretchedRightArm(RH,RE,RS);
	neg find stretchedLeftArm(LH,LE,LS);
	// both hands above the head
	find rightHandAboveHead(RH,H);
	find leftHandAboveHead(LH,H);
	// angle between upper arms is around PI/3
	find upperArmsInY(LE,LS,RE,RS);
}

/**
 * The body is in the "M" position.
 */
pattern M(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder
) {
	Head(H);
	// both arms are bent
	find bentRightArm(RH,RE,RS);
	find bentLeftArm(LH,LE,LS);
	// both hands below the head
	neg find rightHandAboveHead(RH,H);
	neg find leftHandAboveHead(LH,H);
	// elbows are around shoulder height
	LeftElbow.y(LE,LEY);
	LeftShoulder.y(LS,LSY);
	check(Math::abs(LEY-LSY) < 0.05);
	RightElbow.y(RE,REY);
	RightShoulder.y(RS,RSY);
	check(Math::abs(REY-RSY) < 0.05);	
	// hands are Apart
	find handsAreApart(LH,RH);
}

/**
 * The body is in the "Q" position.
 */
pattern Q(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder
) {
	// both arms are bent
	find bentRightArm(RH,RE,RS);
	find bentLeftArm(LH,LE,LS);
	// both hands below the head
	neg find rightHandAboveHead(RH,_H1);
	neg find leftHandAboveHead(LH,_H2);
	// hands are close
	find handsAreClose(LH,RH);
	// right leg is straight 
	// TODO
	// right foot is far away from left foot
	neg find feetAreClose(_LF,_RF);
}

/**
 * The body is in the "C" position.
 */
pattern C(RH:RightHand, 
		  RE:RightElbow, 
		  RS:RightShoulder,
		  LH:LeftHand, 
		  LE:LeftElbow, 
		  LS:LeftShoulder
) {
	// both arms are bent
	find bentRightArm(RH,RE,RS);
	find bentLeftArm(LH,LE,LS);
	// right hand below, left hand above the head
	neg find rightHandAboveHead(RH,H);
	find leftHandAboveHead(LH,_H);
	// hands are not close
	neg find handsAreClose(LH,RH);
	// left hand is to the right of the head
	Head.x(H,HX);
	LeftHand.x(LH,LHX);
	check ( LHX > HX );
}

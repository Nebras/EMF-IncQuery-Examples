package uml.statemachine

import "http://www.eclipse.org/uml2/4.0.0/UML"

pattern usedTriggerSignals(Signal : Signal) {
	Trigger(Trigger);
	SignalEvent(Event);
	SignalEvent.signal(Event, Signal);
	
	find eventForTrigger(Trigger, Event);
}

pattern eventForTrigger(Trigger : Trigger, Event : Event) {
	StateMachine(StMach);
	find triggerInStateMachine(StMach, Trigger);
	Trigger.event(Trigger, Event);
}

private pattern noMethodDefined(Operation : Operation) {
	OpaqueBehavior(Behavior);
	BehavioralFeature.method(Operation, Behavior);
	Behavior.specification(Behavior, Operation);
}

@Constraint(severity="error",location=Operation,message="The operation $Operation$ has no defined behavior.", targetEditorId = "org.eclipse.papyrus.infra.core.papyrusEditor")
pattern operationWithoutBehaviour(Operation : Operation) {
	neg find noMethodDefined(Operation);
}

private pattern behaviorHasSpecification(Behavior : Behavior) {
	Behavior.specification(Behavior, Specification);
	BehavioralFeature.method(Specification, Behavior);
	Operation(Specification);
}

@Constraint(severity = "error", location = Behavior, message = "The behavior $Behavior$ has no specification operation.", targetEditorId = "org.eclipse.papyrus.infra.core.papyrusEditor")
pattern OpaqueBehaviorWithoutOperation(Behavior : OpaqueBehavior) {
	neg find behaviorHasSpecification(Behavior);
}

private pattern usedInStateMachine(Signal: Signal, Class : Class) {
	StateMachine(StMach);
	BehavioredClassifier.classifierBehavior(Class, StMach);
	find triggerInStateMachine(StMach, Trigger);
	Trigger.event(Trigger, Event);	
	SignalEvent(Event);
	SignalEvent.signal(Event, Signal);
}

private pattern triggerInStateMachine(StMach : StateMachine, Trigger : Trigger) {
	StateMachine(StMach);
	StateMachine.region.transition.trigger(StMach, Trigger);
}

@Constraint(severity = "error",location=Reception,message="The reception $Reception$ lacks triggers.", targetEditorId = "org.eclipse.papyrus.infra.core.papyrusEditor")
pattern receptionWithoutAction(Reception : Reception) {
	Class(Class);
	Class.ownedReception(Class, Reception);
	Reception.signal(Reception, Signal);
	Signal(Signal);
	neg find usedInStateMachine(Signal, Class);
}

@Constraint(severity = "error",location=Behavior,message="The number of parameters of $Behavior$ are different from its specification $Operation$", targetEditorId = "org.eclipse.papyrus.infra.core.papyrusEditor")
pattern incompatibleSpecification(Behavior : OpaqueBehavior, Operation : Operation) {
	Behavior.specification(Behavior, Operation);
	
	count find parameterOfOperation(_OperationParameter, Operation) 
	  != count find parameterOfBehavior(_BehaviorParameter, Behavior);
}

pattern parameterOfOperation(P : Parameter, O : Operation) {
	BehavioralFeature.ownedParameter(O, P);
}

pattern parameterOfBehavior(P : Parameter, OB : OpaqueBehavior) {
	Behavior.ownedParameter(OB, P);
}
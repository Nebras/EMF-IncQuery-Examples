package school

import "http:///school.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore"


	pattern school (S) = {
		School(S);
	}


	/**
	 * School names pattern
	 */
	pattern schoolName(S, Name) = {
// 		School(S);
 		School.name(S, Name);
// 		EString(Name);
 	}
	 	
	/**
	 * Students name pattern
	 */
   	pattern studentName(S, Name) = {
// 		Student(S);
  		Student.name(S, Name);
// 		EString(Name);
 	}		
 	
 	/**
 	 * Return the students of the school
 	 */
 	 @ObservableValue(name = "Y", expression = "Y.startingDate")
 	 @ObservableValue(name = "S", expression = "S.name")
 	 @ObservableValue(name = "Sch", expression = "Sch.name")
 	 @ObservableValue(name = "SC", expression = "SC.code")
 	pattern studentOfSchool(S:Student, Sch:School, Y:Year, SC:SchoolClass) = {
 		School.years(Sch, Y);
 		Year.schoolClasses(Y, SC);
 		SchoolClass.students(SC, S);
 	}
 	
 	/*
 	 * Path expression demo
 	 */
 	pattern studentOfSchoolCompact(S:Student, Sch:School) = {
 		School.years.schoolClasses.students(Sch,S);
 	}	
 		
 		
 	/**
 	 * Return a students pair, who study in same school and the first one is the older
 	 */
 	pattern inSameSchoolDifferentYears(ElderStudent: Student, YoungerStudent: Student) = {
 		find studentOfSchool(ElderStudent, School, Year1, SchoolClass1);
 		find studentOfSchool(YoungerStudent, School, Year2, SchoolClass2); 

 		Year.startingDate(Year1, Date1);
 		EInt(Date1);
 		Year.startingDate(Year2, Date2);
 		EInt(Date2); 		
 				
 		ElderStudent != YoungerStudent;		
 		Date1 != Date2;
 		
 	}	
  				

	/**
	 * Return a students pair, who study in same school class and the first one is the older
	 */
 	pattern sameCodeClassDifferentYears(ElderStudent, YoungerStudent) = {
 		find inSameSchoolDifferentYears(ElderStudent, YoungerStudent);
 		
  		SchoolClass.students(SchoolClass1, ElderStudent);
  		SchoolClass(SchoolClass1);
 		SchoolClass.code(SchoolClass1, Code1);
 		EChar(Code1);
   		SchoolClass.students(SchoolClass2, YoungerStudent);
  		SchoolClass(SchoolClass2);
 		SchoolClass.code(SchoolClass2, Code2);
 		EChar(Code2);
 		
 	}
 	
	@Handler(fileExtension = "school")
 	pattern sameCodeClassDifferentYearsBetter(ElderStudent, YoungerStudent) = {
 		find inSameSchoolDifferentYears(ElderStudent, YoungerStudent);
 		
  		SchoolClass.students(SchoolClass1, ElderStudent);
  		SchoolClass(SchoolClass1);
 		SchoolClass.code(SchoolClass1, Code);
 		EChar(Code);
   		SchoolClass.students(SchoolClass2, YoungerStudent);
  		SchoolClass(SchoolClass2);
 		SchoolClass.code(SchoolClass2, Code);
 		
 	}
 	
 	/*
 	 * Transitive closure demo
 	 */
 	pattern friendsWith(S1:Student, S2:Student) = {
 		Student.friendsWith(S1,S2);
 	} or {
 		Student.friendsWith(S2,S1);
 	}
 	
 	@PatternUI(message = "$S1.name$ is friends with $S2.name$")
 //	@ObservableValue(name = "S1")
 @Handler(fileExtension = "school")
 	pattern inTheCircleOfFriends(S1:Student, S2:Student) = {
 		find friendsWith+(S1,S2);
 	}
 	
 	/*
 	 * check expression demo
 	 * TODO: fails with a weird exception:
 	 * Caused by: java.lang.NoSuchMethodException: Could not find method school.Course.getSubject()
	 * at org.eclipse.xtext.xbase.interpreter.impl.XbaseInterpreter.invokeOperation(XbaseInterpreter.java:720)
 	 */
/* 	pattern specialCourses(C:Course) = {
 		Course(C);
 		check(C.subject.contains("fig"));
 	}
  */	
 	
 	pattern specialCourses2(C:Course) = {
 		Course(C);
 		Course.subject(C,Sub);
 	//	EString(Sub);
 		check((Sub as String).contains("fig"));
 	}
 	



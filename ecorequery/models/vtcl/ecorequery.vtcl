namespace ecore;
import nemf.packages.ecore;

@incremental
machine eQuery {
	
	@SampleUI(scope="ResourceSet", mode="ignore")
	pattern eClass(EClass) = {
		EClass(EClass);
	}
	@SampleUI(scope="ResourceSet", mode="ignore")
	pattern superTypeOf(Super,Sub) = {
		EClass.eSuperTypes(R,Sub,Super);
		EClass(Super);
		EClass(Sub);
	}	

	// actual solution follows from here
	
	/*
	 * Generic pattern: E is an EClass, which has an EAttribute Attr, having a datatype Type
	 */
	@SampleUI(scope="ResourceSet", mode="ignore")
	pattern EClassAttribute(E, Attr, Type) = {
		EClass(E); 
		EClass.eStructuralFeatures(E1_R,E,Attr);
		EAttribute(Attr);
		ETypedElement.eType(E3_R,Attr,Type);
	}

	/*
	 * Problem-specific pattern: E is an EClass, which has an EAttribute Attr, having EString as its datatype
	 */
	@SampleUI(scope="ResourceSet", mode="ignore")
	pattern EClassWithEStringAttribute(E,Attr) = {
		EClass(E);
		find EClassAttribute(E,Attr,Type);
		find IsEString(Type);
	}
		
	/*
	 * ERef is an EReference with a 0-* multiplicity constraint
	 */	
	@SampleUI(scope="ResourceSet", mode="ignore")
	pattern EReferenceWithStarMultiplicity(ERef) = {
		EReference(ERef);
		nemf.ecore.datatypes.EInt(LowerBound);
		ETypedElement.lowerBound(L_R,ERef,LowerBound); 
		nemf.ecore.datatypes.EInt(UpperBound);
		ETypedElement.upperBound(U_R,ERef,UpperBound);
		check(toInteger(value(LowerBound)) == 0 && toInteger(value(UpperBound)) == -1);
	}
	
	@SampleUI(scope="ResourceSet", mode="ignore")
	shareable pattern EReferenceWithOneMultiplicity(ERef) = {
		EReference(ERef);
		nemf.ecore.datatypes.EInt(LowerBound);
		ETypedElement.lowerBound(L_R,ERef,LowerBound);
		nemf.ecore.datatypes.EInt(UpperBound);
		ETypedElement.upperBound(U_R,ERef,UpperBound);
		check(toInteger(value(LowerBound)) == 1 && toInteger(value(UpperBound)) == 1); // this corresponds to the bug in 
		// https://trac.inf.mit.bme.hu/VIATRA/ticket/379
	}

	// implements the sample query given in example.pdf
	@SampleUI(scope="ResourceSet")
	pattern sampleQuery(XElement, YElement, Relates, Label1, Label2) = 
	{
		// structural block, defining the basic pattern body
		EClass(XElement);
		EClass.eStructuralFeatures(E1_R,XElement,Relates);
		EReference(Relates);
		EClass(YElement);
		ETypedElement.eType(E3_R,Relates,YElement);
	
		// express the multiplicity of the ERef between X and Y
		find EReferenceWithStarMultiplicity(Relates);

		// express that both X and Y have got an attribute of type EString
		find EClassWithEStringAttribute(XElement, Label1);
		find EClassWithEStringAttribute(YElement, Label2);
		
		// filter out matching to Ecore.ecore (as the pattern would also have matches there)
		neg find IsInECore(XElement);
		neg find IsInECore(YElement);
	}

	@SampleUI(scope="ResourceSet")
	pattern sampleQuery2(XElement, YElement, Relates1, Relates2, Label1, Label2) =
	{
		// structural block, defining the basic pattern body
		EClass(XElement);
		EClass.eStructuralFeatures(E1_R,XElement,Relates1);
		EReference(Relates1);
		
		EReference.eOpposite(E3_R,Relates1,Relates2);
		EReference(Relates2);
		
		EClass(YElement);
		ETypedElement.eType(E5_R,Relates1,YElement);
		
		// express the multiplicity of the ERef between X and Y
		find EReferenceWithStarMultiplicity(Relates1);
		find EReferenceWithOneMultiplicity(Relates2);
		
		// express that both X and Y have got an attribute of type EString
		find EClassWithEStringAttribute(XElement, Label1);
		find EClassWithEStringAttribute(YElement, Label2);
		
		// filter out matching to Ecore.ecore (as the pattern would also have matches there)
		neg find IsInECore(XElement);
		neg find IsInECore(YElement);
	}

	// helper patterns
	
	/**
	 * Element is "the" EString in the ECore package
	 */
	@SampleUI(scope="ResourceSet", mode="ignore") 
	pattern IsEString(Element) = {
		find IsInECore(Element);
		find ECoreNamedElement(Element,Name);
		check(value(Name) == "EString");
	}

	/*
	 * Generic pattern: Element is an ECore model element, having name Name
	 */
	@SampleUI(scope="ResourceSet", mode="ignore")
	pattern ECoreNamedElement(Element,Name) = {
	 ENamedElement(Element);
	 nemf.ecore.datatypes.EString(Name);
	 ENamedElement.name(N_R,Element,Name);
	}
	
	/*
	 * Generic pattern: Element resides in "the" Ecore package
	 */
	@SampleUI(scope="ResourceSet", mode="ignore")
	 pattern IsInECore(Element) = {
	  EClassifier.ePackage(EP_R,Element,EP);
	  EPackage(EP);
	  EPackage.nsURI(NSU_R,EP,Str_NSU);
	  nemf.ecore.datatypes.EString(Str_NSU);
	  check(value(Str_NSU) == "http://www.eclipse.org/emf/2002/Ecore");
	}

	
	
}


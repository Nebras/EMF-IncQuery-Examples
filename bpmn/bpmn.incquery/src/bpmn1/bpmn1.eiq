package bpmn1

import "http://stp.eclipse.org/bpmn"

pattern MyPattern(P)= {
	Activity(P);
}

@Off pattern loopingActivity(A : Activity)= {
	Activity.looping(A, true);
}

@Constraint(location = "A", message =
"$A.name$ is a bad looping activity", severity = "warning" )
pattern badLoopingActivity(A : Activity)= {
	find loopingActivity(A);
	Activity.name(A, Name);
	check(!(Name as String).startsWith("Loop"));
}

@Constraint(location = "A", message =
"$A.name$ is a lonely activity", severity = "warning" )
pattern lonelyActivity(A : Activity)= {
//	neg find someTypeOfEvent(A);
	neg find hasInOrOut(A);
}

// ------------------------------------------------ helper patterns -------------------------------
@Off
pattern hasInOrOut(A:Activity)= {
	find inEdge(A); } or {
	find outEdge(A);
}

@Off
pattern inEdge(A: Activity)= {
	find sequenceFlowEdge(SeqEdgeTo, SomeActivity, A);
} or {
	find messageFlowEdge(MessEdgeTo, SomeMessActivity, A);
}
@Off
pattern outEdge(A: Activity)= {
	find sequenceFlowEdge(SeqEdgeFrom, A, OtherActivity);
} or {
	find messageFlowEdge(MessEdgeFrom, A, OtherMessActivity);
}
@Off
pattern sequenceFlowEdge(Flow, Src, Dst)= {
	SequenceEdge(Flow);
	Activity(Src);
	Activity(Dst);
	SequenceEdge.source(Flow, Src);
	SequenceEdge.target(Flow, Dst);
}
@Off
pattern messageFlowEdge(Flow, Src, Dst)= {
	MessagingEdge(Flow);
	Activity(Src);
	Activity(Dst);
	MessagingEdge.source(Flow, Src);
	MessagingEdge.target(Flow, Dst);
}
@Off
pattern someTypeOfEvent(E)= {
	find EventStart(E);
} or {
	find EventIntermediate(E);
} or {
	find EventEnd(E);
}
@Off
pattern EventStart(E)= {
	find EventStartEmpty(E);
} or {
	find EventStartMessage(E);
} or {
	find EventStartRule(E);
} or {
	find EventStartTimer(E);
} or {
	find EventStartSignal(E);
} or {
	find EventStartMultiple(E);
} or {
	find EventStartLink(E);
}
//@Off
pattern EventStartEmpty(G)= {
	//Activity.activityType(G, ActivityType::EventStartEmpty); doesn't work, unfortunately!
	Activity.activityType(G,AT);
	ActivityType(AT);
	AT == ActivityType::EventStartEmpty;
//	check ((AT as org.eclipse.stp.bpmn.ActivityType).ordinal == 2 );
}
@Off
pattern EventStartMessage(G)= {
	Activity.activityType(G, "EventStartMessage");
}
@Off
pattern EventStartRule(G)= {
	Activity.activityType(G, "EventStartRule");
}
@Off
pattern EventStartTimer(G)= {
	Activity.activityType(G, "EventStartTimer");
}
@Off
pattern EventStartLink(G)= {
	Activity.activityType(G, "EventStartLink");
}
@Off
pattern EventStartMultiple(G)= {
	Activity.activityType(G, "EventStartMultiple");
}
@Off
pattern EventStartSignal(G)= {
	Activity.activityType(G, "EventStartSignal");
}
@Off
pattern EventEndEmpty(G)= {
	Activity.activityType(G, "EventEndEmpty");
}
@Off
pattern EventEndMessage(G)= {
	Activity.activityType(G, "EventEndMessage");
}
@Off
pattern EventEndError(G)= {
	Activity.activityType(G, "EventEndError");
}
@Off
pattern EventEndCompensation(G)= {
	Activity.activityType(G, "EventEndCompensation");
}
@Off
pattern EventEndTerminate(G)= {
	Activity.activityType(G, "EventEndTerminate");
}
@Off
pattern EventEndLink(G)= {
	Activity.activityType(G, "EventEndLink");
}
@Off
pattern EventEndMultiple(G)= {
	Activity.activityType(G, "EventEndMultiple");
}
@Off
pattern EventEndCancel(G)= {
	Activity.activityType(G, "EventEndCancel");
}
@Off
pattern EventEndSignal(G)= {
	Activity.activityType(G, "EventEndSignal");
}
@Off
pattern EventEnd(E)= {
	find EventEndEmpty(E);
} or {
	find EventEndMessage(E);
} or {
	find EventEndError(E);
} or {
	find EventEndCompensation(E);
} or {
	find EventEndTerminate(E);
} or {
	find EventEndLink(E);
} or {
	find EventEndMultiple(E);
} or {
	find EventEndCancel(E);
} or {
	find EventEndSignal(E);
}
@Off
pattern EventIntermediateEmpty(G)= {
	Activity.activityType(G, "EventIntermediateEmpty");
}
@Off
pattern EventIntermediateMessage(G)= {
	Activity.activityType(G, "EventIntermediateMessage");
}
@Off
pattern EventIntermediateTimer(G)= {
	Activity.activityType(G, "EventIntermediateTimer");
}
@Off
pattern EventIntermediateError(G)= {
	Activity.activityType(G, "EventIntermediateError");
}
@Off
pattern EventIntermediateCompensation(G)= {
	Activity.activityType(G, "EventIntermediateCompensation");
}
@Off
pattern EventIntermediateRule(G)= {
	Activity.activityType(G, "EventIntermediateRule");
}
@Off
pattern EventIntermediateLink(G)= {
	Activity.activityType(G, "EventIntermediateLink");
}
@Off
pattern EventIntermediateMultiple(G)= {
	Activity.activityType(G, "EventIntermediateMultiple");
}
@Off
pattern EventIntermediateCancel(G)= {
	Activity.activityType(G, "EventIntermediateCancel");
}
@Off
pattern EventIntermediateSignal(G)= {
	Activity.activityType(G, "EventIntermediateSignal");
}
@Off
pattern EventIntermediate(E)= {
	find EventIntermediateEmpty(E);
} or {
	find EventIntermediateMessage(E);
} or {
	find EventIntermediateTimer(E);
} or {
	find EventIntermediateError(E);
} or {
	find EventIntermediateCompensation(E);
} or {
	find EventIntermediateRule(E);
} or {
	find EventIntermediateLink(E);
} or {
	find EventIntermediateMultiple(E);
} or {
	find EventIntermediateCancel(E);
} or {
	find EventIntermediateSignal(E);
}
package bpmn1

import "http://stp.eclipse.org/bpmn"

pattern loopingActivity(A : Activity)= {
	Activity.looping(A, true);
}

@Constraint(location = A, message =
"$A.name$ is a bad looping activity", severity = "warning" )
pattern badLoopingActivity(A : Activity)= {
	find loopingActivity(A);
	Activity.name(A, Name);
	check(!(Name as String).startsWith("Loop"));
}

@Constraint(location = A, message =
"$A.name$ is a lonely activity", severity = "warning" )
pattern lonelyActivity(A : Activity)= {
	neg find hasInOrOut(A);
}

pattern lonelyActivityNames(ANames)= {
	neg find hasInOrOut(A);
	Activity.name(A, ANames);
}


pattern hasInOrOut(A:Activity)= {
	find inEdge(A); } or {
	find outEdge(A);
}

pattern inEdge(A: Activity)= {
	find sequenceFlowEdge(_SeqEdgeTo, _SomeActivity, A);
} or {
	find messageFlowEdge(_MessEdgeTo, _SomeMessActivity, A);
}
pattern outEdge(A: Activity)= {
	find sequenceFlowEdge(_SeqEdgeFrom, A, _OtherActivity);
} or {
	find messageFlowEdge(_MessEdgeFrom, A, _OtherMessActivity);
}
pattern sequenceFlowEdge(Flow:SequenceEdge, Src:Activity, Dst:Activity)= {
	SequenceEdge.source(Flow, Src);
	SequenceEdge.target(Flow, Dst);
}

pattern sequenceFlowEdgeName(FName)= {
	SequenceEdge.source(Flow, _Src);
	SequenceEdge.target(Flow, _Dst);
	SequenceEdge.name(Flow, FName);
}

pattern messageFlowEdge(Flow:MessagingEdge, Src:Activity, Dst:Activity)= {
	MessagingEdge.source(Flow, Src);
	MessagingEdge.target(Flow, Dst);
}


pattern pool(P:Pool)={
	Pool(P);
}

pattern poolNames(PNames)={
	Pool.name(_P, PNames);
}

pattern artifact(A:Artifact)={
	Artifact(A);
}

pattern artifactNames(ANames)={
	Artifact.name(_A, ANames);
}

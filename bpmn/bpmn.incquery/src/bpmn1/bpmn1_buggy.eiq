package bpmn1

import "http://stp.eclipse.org/bpmn"

// ------------------------------------------------ helper patterns -------------------------------
/*
 * At the moment, these are not in a working condition
 */

pattern someTypeOfEvent(E)= {
	find EventStart(E);	
} or {
	find EventIntermediate(E);
} or {
	find EventEnd(E);
}


pattern someTypeOfEventNames(ENames)= {
	find EventStart(E);	
	Activity.name(E, ENames);
} or {
	find EventIntermediate(E);
	Activity.name(E, ENames);
} or {
	find EventEnd(E);
	Activity.name(E, ENames);
}


pattern EventStart(E)= {
	find EventStartEmpty(E);
} or {
	find EventStartMessage(E);
} or {
	find EventStartRule(E);
} or {
	find EventStartTimer(E);
} or {
	find EventStartSignal(E);
} or {
	find EventStartMultiple(E);
} or {
	find EventStartLink(E);
}
//@Off
pattern EventStartEmpty(G)= {
	//Activity.activityType(G, ActivityType::EventStartEmpty); doesn't work, unfortunately!
	Activity.activityType(G,AT);
	ActivityType(AT);
//	AT == ActivityType::EventStartEmpty; // doesn't work at the moment
//	check ((AT as org.eclipse.stp.bpmn.ActivityType).ordinal == 2 ); // throws exception
// see https://github.com/ujhelyiz/EMF-IncQuery/issues/47
}

pattern EventStartMessage(G)= {
	Activity.activityType(G, ActivityType::EventStartMessage);
}

pattern EventStartRule(G)= {
	Activity.activityType(G, ActivityType::EventStartRule);
}

pattern EventStartTimer(G)= {
	Activity.activityType(G, ActivityType::EventStartTimer);
}

pattern EventStartLink(G)= {
	Activity.activityType(G, ActivityType::EventStartLink);
}

pattern EventStartMultiple(G)= {
	Activity.activityType(G, ActivityType::EventStartMultiple);
}

pattern EventStartSignal(G)= {
	Activity.activityType(G, ActivityType::EventStartSignal);
}

pattern EventEndEmpty(G)= {
	Activity.activityType(G, ActivityType::EventEndEmpty);
}

pattern EventEndMessage(G)= {
	Activity.activityType(G, ActivityType::EventEndMessage);
}

pattern EventEndError(G)= {
	Activity.activityType(G, ActivityType::EventEndError);
}

pattern EventEndCompensation(G)= {
	Activity.activityType(G, ActivityType::EventEndCompensation);
}

pattern EventEndTerminate(G)= {
	Activity.activityType(G, ActivityType::EventEndTerminate);
}

pattern EventEndLink(G)= {
	Activity.activityType(G, ActivityType::EventEndLink);
}

pattern EventEndMultiple(G)= {
	Activity.activityType(G, ActivityType::EventEndMultiple);
}

pattern EventEndCancel(G)= {
	Activity.activityType(G, ActivityType::EventEndCancel);
}

pattern EventEndSignal(G)= {
	Activity.activityType(G, ActivityType::EventEndSignal);
}

pattern EventEnd(E)= {
	find EventEndEmpty(E);
} or {
	find EventEndMessage(E);
} or {
	find EventEndError(E);
} or {
	find EventEndCompensation(E);
} or {
	find EventEndTerminate(E);
} or {
	find EventEndLink(E);
} or {
	find EventEndMultiple(E);
} or {
	find EventEndCancel(E);
} or {
	find EventEndSignal(E);
}

pattern EventIntermediateEmpty(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateEmpty);
}

pattern EventIntermediateMessage(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateMessage);
}

pattern EventIntermediateTimer(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateTimer);
}

pattern EventIntermediateError(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateError);
}

pattern EventIntermediateCompensation(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateCompensation);
}

pattern EventIntermediateRule(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateRule);
}

pattern EventIntermediateLink(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateLink);
}

pattern EventIntermediateMultiple(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateMultiple);
}

pattern EventIntermediateCancel(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateCancel);
}

pattern EventIntermediateSignal(G)= {
	Activity.activityType(G, ActivityType::EventIntermediateSignal);
}

pattern EventIntermediate(E)= {
	find EventIntermediateEmpty(E);
} or {
	find EventIntermediateMessage(E);
} or {
	find EventIntermediateTimer(E);
} or {
	find EventIntermediateError(E);
} or {
	find EventIntermediateCompensation(E);
} or {
	find EventIntermediateRule(E);
} or {
	find EventIntermediateLink(E);
} or {
	find EventIntermediateMultiple(E);
} or {
	find EventIntermediateCancel(E);
} or {
	find EventIntermediateSignal(E);
}

pattern Activities(A:Activity) = {
	Activity(A);
}

pattern ActivitiesNames(ANames) = {
	Activity.name(_A, ANames);
}
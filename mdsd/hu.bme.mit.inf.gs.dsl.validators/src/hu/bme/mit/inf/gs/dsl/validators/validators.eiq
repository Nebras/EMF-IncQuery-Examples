package hu.bme.mit.inf.gs.dsl.validators

import "http://soamodel/1.0"

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The ServiceComponent name $S1.name$ is duplicated", severity="error", location="S1")
pattern UniqueServiceComponentNames(Name, S1) = {
	ServiceComponent.name(S1, Name);
	ServiceComponent.name(S2, Name);
	S1 != S2;
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The ServiceMethod signature with name $S1.name$ is duplicated", severity="error", location="S1")
pattern UniqueServiceMethodSignature(Name, S1) = {
	ServiceMethod.name(S1, Name);
	ServiceMethod.name(S2, Name);
	ServiceMethod.parameters.parameterType(S1, Type);
	ServiceMethod.parameters.parameterType(S2, Type);
	S1 != S2;
}

////////////////////////////////////////////////////////////////////////////////

pattern RestMethods(RM) = {
	RestMethod(RM);
}

@Constraint(message="$M.name$ is a ServiceMethod, but not a RestMethod.", severity="error", location="M")
pattern AllRestMethods(M) = {
	ServiceMethod(M);
	neg find RestMethods(M);
}


////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The $SM.name$ method has two parameters with the same name.", severity="error", location="SM")
pattern UniqueParameterName(SM, Name) = {
	ServiceMethod.parameters(SM, P1);
	ServiceMethod.parameters(SM, P2);
	Parameter.name(P1, Name);
	Parameter.name(P2, Name);
	P1 != P2;
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The DataType name $S1.name$ is duplicated", severity="error", location="S1")
pattern UniqueDataTypeNames(Name, S1) = {
	DataType.name(S1, Name);
	DataType.name(S2, Name);
	S1 != S2;
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The Entity name $S1.name$ is duplicated", severity="error", location="S1")
pattern UniqueEntityNames(Name, S1) = {
	Entity.name(S1, Name);
	Entity.name(S2, Name);
	S1 != S2;
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The $E.name$ entity has two attributes with the name $Name$", severity="error", location="E")
pattern UniqueAttributeName(E, Name) = {
	Entity.attributes(E, P1);
	Entity.attributes(E, P2);
	Attribute.name(P1, Name);
	Attribute.name(P2, Name);
	P1 != P2;
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="Entity $E1.name$'s ID is not an attribute of the entity.", severity="error", location="E1")
pattern EntityIDNotAttributeOfTheEntity(E1) = {
	Entity.ID(E1, ID);
	Attribute.attributeOf(ID, E2);
	E1 != E2;
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The EnumLiteral name $S1.name$ is duplicated", severity="error", location="S1")
pattern UniqueEnumLiteralNames(Name, S1) = {
	EnumLiteral.name(S1, Name);
	EnumLiteral.name(S2, Name);
	S1 != S2;
}

////////////////////////////////////////////////////////////////////////////////

pattern CollectionTypes(T) = {
	CollectionType.itemType(CollectionType, T);
}

@Constraint(message="Collection type $T.name$ is not in the architecture types.", severity="error", location="T")
pattern CollectionTypesInTheArchitecture(T) = {
	CollectionType.itemType(CollectionType, T);
	neg find SOAArchitectureTypes(T);
}

////////////////////////////////////////////////////////////////////////////////

pattern SOAArchitectureTypes(T) = {
	ServiceOrientedArchitecture.dataTypes(SOA, T);
}

pattern SOAServiceComponent(SC) = {
	ServiceOrientedArchitecture.components(SOA, SC);
}

@Constraint(message="Data type $T.name$ is not in the architecture types.", severity="error", location="T")
pattern DataTypesAndComponentsInTheArchitecture(T) = {
	DataType(T);
	neg find SOAArchitectureTypes(T);
	// and
	ServiceComponent(SC);
	neg find SOAServiceComponent(SC);
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="ServiceComponent $SC1.name$ shares the same URI or namespace with another ServiceComponent.", severity="error", location="SC1")
pattern UniqueServiceComponentURIAndNamespace(SC1, SC2) = {
	ServiceComponent.URI(SC1, URI);
	ServiceComponent.URI(SC2, URI);
	SC1 != SC2;	
} or {
	ServiceComponent.namespace(SC1, Namespace);
	ServiceComponent.namespace(SC2, Namespace);
	SC1 != SC2;	
} 

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="DataType $DT.name$ has two collection types.", severity="error", location="DT")
pattern UniqueCollections(DT) = {
	DataType(DT);
	CollectionType(CT1);
	CollectionType(CT2);
	CollectionType.itemType(CT1, DT);
	CollectionType.itemType(CT2, DT);
	CT1 != CT2;
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="Enum $E.name$ has two literals of the same value.", severity="error", location="E")
pattern UniqueEnumLiteralIDs(E, EL1, EL2) = {
	Enum.literals(E, EL1);
	Enum.literals(E, EL2);
 
	EnumLiteral.name(EL1, Name1);
	EnumLiteral.name(EL2, Name2);
	EnumLiteral.value(EL1, Value);
	EnumLiteral.value(EL2, Value);

	Name1 != Name2;
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The method $SM.name$ has an empty description field.", severity="warning", location="SM")
pattern ServiceMethodDescriptionUnfinished(SM) = {
    ServiceMethod.description(SM, Desc);
    check(Desc == "");
}

////////////////////////////////////////////////////////////////////////////////

@Constraint(message="The OCL constraint $SM.name$ has an empty description field.", severity="warning", location="SM")
pattern OCLConstraintDescriptionUnfinished(OCL) = {
    OCLConstraint.description(OCL, Desc);
    check(Desc == "");
}

////////////////////////////////////////////////////////////////////////////////

pattern SuperType(E, S) = {
	Entity.superType(E, S);
}


@Constraint(message="The Entity $E.name$ has a circle in its inheritance graph.", severity="error", location="E")
pattern NoCirclesInInheritance(E) = {
    neg find SuperType(E, ST);
} or {
    Entity(E);
	Entity.superType(E, ST);
    find NoCirclesInInheritance(ST);
}



